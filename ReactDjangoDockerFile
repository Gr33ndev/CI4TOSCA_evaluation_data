# ========================
# Base Environment Setup
# ========================
FROM ubuntu:20.04 AS base

# Prevent interactive prompts (fix tzdata issue)
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    git \
    python3 \
    python3-venv \
    python3-pip \
    curl \
    npm \
    nginx \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# ========================
# Clone Repositories
# ========================
FROM base AS source

WORKDIR /app
RUN git clone --depth=1 https://github.com/romansndlr/react-vite-realworld-example-app.git frontend \
    && git clone --depth=1 https://github.com/Sean-Miningah/realWorld-DjangoRestFramework.git backend

# ========================
# Frontend Build (React-Vite)
# ========================
FROM node:18 AS frontend-build

WORKDIR /app/frontend
COPY --from=source /app/frontend ./

RUN npm install && npm run build || { echo "Frontend build failed"; exit 1; }

# Debugging step: Check if the build folder exists
RUN ls -l /app/frontend/dist

# ========================
# Backend Setup (Django)
# ========================
FROM python:3.10 AS backend-build

WORKDIR /app/backend
COPY --from=source /app/backend ./

# Install PostgreSQL client libraries before installing Python dependencies
RUN apt-get update && apt-get install -y \
    libpq-dev gcc && rm -rf /var/lib/apt/lists/*

# Setup virtual environment and install dependencies
RUN python3 -m venv /app/backend/venv \
    && . /app/backend/venv/bin/activate \
    && pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir django \
    && pip install --no-cache-dir -r requirements.txt

# ========================
# Final Container (Python + Nginx)
# ========================
FROM python:3.10

# Install Nginx
RUN apt update && apt install -y nginx && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Copy frontend build files from Reactâ€™s `dist/` directory
COPY --from=frontend-build /app/frontend/dist /usr/share/nginx/html

# Copy backend app and virtual environment
COPY --from=backend-build /app/backend /app/backend
WORKDIR /app/backend

# Modify settings.py to use localhost instead of 'db'
RUN sed -i "s/'HOST': 'db'/'HOST': 'host.docker.internal'/g" /app/backend/config/settings.py

# Copy the virtual environment from backend-build
COPY --from=backend-build /app/backend/venv /app/backend/venv

# Ensure the virtual environment is activated
ENV PATH="/app/backend/venv/bin:$PATH"

# Force Django to use localhost for database
ENV DATABASE_HOST=localhost

# Inject correct Nginx configuration inside the container
RUN echo ' \
server { \
    listen 80; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html; \
    location / { \
        try_files $uri /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Set permissions
RUN chmod +x manage.py

# Expose ports (80 for frontend, 8000 for Django API)
EXPOSE 80 8000

# Start services
CMD ["sh", "-c", "nginx & python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
